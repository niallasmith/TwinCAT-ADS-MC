<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Functions" Id="{87e7f3b9-d9e3-4e1a-ad5e-3d4326ef9e7d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Functions
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_EnableAxis" Id="{a241beb0-66b2-4f66-a177-89d82c51ec16}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_EnableAxis : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Main.AxisPower(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE,Enable_Positive:=TRUE,Enable_Negative:=TRUE); 

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MoveAbsolute" Id="{21c8d92b-8bc3-49df-8463-a5f13171cc19}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_MoveAbsolute : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
	position : LREAL;
	velocity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Main.AxisPower(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE,Enable_Positive:=TRUE,Enable_Negative:=TRUE); 

WHILE Main.Axis[axisID][loopID].Status.Operational = FALSE DO
	Main.MoveAbsolute(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

Main.MoveAbsolute(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
Main.Reset(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
			
Main.MoveAbsolute(Axis:=main.Axis[axisID][loopID],Position:=position,Velocity:=velocity);
					
Main.MoveAbsolute(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);

Main.MoveAbsolute(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MoveRelative" Id="{49a2a512-3e94-4879-b314-10353ec76639}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_MoveRelative : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
	position : LREAL;
	velocity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Main.AxisPower(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE,Enable_Positive:=TRUE,Enable_Negative:=TRUE); 

WHILE Main.Axis[axisID][loopID].Status.Operational = FALSE DO
	Main.MoveRelative(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

Main.MoveRelative(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
Main.Reset(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
			
Main.MoveRelative(Axis:=Main.Axis[axisID][loopID],Distance:=position,Velocity:=velocity);
					
Main.MoveRelative(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);

Main.MoveRelative(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadActiveLoop" Id="{e51264ef-8758-4e07-9f48-0556be0a0f46}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_ReadActiveLoop : UINT
VAR_INPUT
	axisID : UINT;
END_VAR
VAR_OUTPUT
	loopID : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[loopID := Main.Axis[axisID][0].NcToPlc.ActiveControlLoopIndex;

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadAxisParameters" Id="{b4b35217-25df-4f47-ab66-df6486a56b0b}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_ReadAxisParameters : LREAL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
VAR_OUTPUT
	maxVelocity : LREAL;
	maxAcceleration : LREAL;
	defaultAcceleration : LREAL;
	defaultJerk : LREAL;
	homingVelocity : LREAL;
	manualVelocityFast : LREAL;
	manualVelocitySlow : LREAL;
	jogIncrement : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Axis Max Velocity
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMaxVelocity);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
maxVelocity := Main.ReadParameter.Value;


// Axis Max Acceleration
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMaximumAcceleration);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
maxAcceleration := Main.ReadParameter.Value;


//Axis Default Acceleration
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisAcc);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
defaultAcceleration := Main.ReadParameter.Value;


//Axis Default Jerk
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisJerk);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
defaultJerk := Main.ReadParameter.Value;


//Axis Homing Velocity +ve direction
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisCalibrationVelocityForward);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
homingVelocity := Main.ReadParameter.Value;


//Axis Manual Velocity (Fast)
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisManualVelocityFast);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
manualVelocityFast := Main.ReadParameter.Value;


//Axis Manual Velocity (Slow)
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisManualVelocitySlow);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
manualVelocitySlow := Main.ReadParameter.Value;


//Axis Jog Increment +ve Direction
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisJogIncrementForward);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
jogIncrement := Main.ReadParameter.Value;

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadControllerParameters" Id="{7fb38bd3-41ba-4da0-9f1e-44c79b423464}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_ReadControllerParameters : UINT
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
VAR_OUTPUT
	kvParam : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Controller Kv parameter
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisPositionControlKv);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
kvParam := Main.ReadParameter.Value;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadDriveParameters" Id="{02c22897-cd77-4264-9838-7064c169a620}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_ReadDriveParameters : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
VAR_OUTPUT
	inversePolarity : BOOL;
	refVelocity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Drive inverse motor polarity
Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMotorDirectionInverse,Enable:=TRUE,ReadMode:=E_ReadMode.READMODE_ONCE);
//Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
//WHILE (Main.ReadBoolParameter.Busy = TRUE) DO
//	Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
//END_WHILE
//IF Main.ReadBoolParameter.Valid THEN
	inversePolarity := Main.ReadBoolParameter.Value;
//END_IF
Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);

// Drive Reference Velocity
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisRefVeloOnRefOutput);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
refVelocity := Main.ReadParameter.Value;

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadEncoderParameters" Id="{36292ad9-d555-42b3-804e-9c81d4086bc8}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_ReadEncoderParameters : UINT
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
VAR_OUTPUT
	invertEncoderDirection : BOOL;
	scalingFactorNumerator : LREAL;
	scalingFactorDenominator : LREAL;
	encoderOffset : LREAL;
	encoderMask : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Invert Encoder Direction
Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderDirectionInverse,Enable:=TRUE,ReadMode:=E_ReadMode.READMODE_ONCE);
//Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID]);
//WHILE (Main.ReadParameter.Busy = TRUE) DO
//	Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
//END_WHILE
//IF Main.ReadBoolParameter.Valid THEN
	invertEncoderDirection := Main.ReadBoolParameter.Value;
//END_IF
Main.ReadBoolParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);


// Encoder Scaling Factor Numerator
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderScalingNumerator);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
scalingFactorNumerator := Main.ReadParameter.Value;


// Encoder Scaling Factor Denominator
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderScalingDenominator);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
scalingFactorDenominator := Main.ReadParameter.Value;


// Encoder Offset
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderOffset);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
encoderOffset := Main.ReadParameter.Value;


// Encoder Mask
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderMask);
Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=TRUE);
WHILE Main.ReadParameter.Busy DO
	Main.ReadParameter(Axis:=Main.Axis[axisID][loopID],Enable:=FALSE);
END_WHILE
encoderMask := Main.ReadParameter.Value;


RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetActiveEncoder" Id="{9a091db5-976f-4ff2-9331-531b0095b97c}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_SetActiveEncoder : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Main.SetControlLoop(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE,SelectType:=E_SelectControlLoopType.SelectControlLoopType_Standard,EncoderIndex:=loopID);
Main.SetControlLoop(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.SetControlLoop.Done=FALSE) DO
	Main.SetControlLoop(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteAxisParameters" Id="{66fe626f-3ffa-44ff-b51a-f7cf0d645e56}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_WriteAxisParameters : BOOL
VAR_INPUT
	axisID: UINT;
	loopID: UINT;
	maxVelocity : LREAL;
	maxAcceleration : LREAL;
	defaultAcceleration : LREAL;
	defaultJerk : LREAL;
	homingVelocity : LREAL;
	manualVelocityFast : LREAL;
	manualVelocitySlow : LREAL;
	jogIncrement : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Axis Max Velocity
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMaxVelocity,Value:=maxVelocity);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

// Axis Max Acceleration
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMaximumAcceleration,Value:=maxAcceleration);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Max Deceleration
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMaximumDeceleration,Value:=maxAcceleration);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Default Acceleration
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisAcc,Value:=defaultAcceleration);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Default Deceleration
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisDec,Value:=defaultAcceleration);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Default Jerk
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisJerk,Value:=defaultJerk);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Homing Velocity +ve direction
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisCalibrationVelocityForward,Value:=homingVelocity);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Homing Velocity -ve Direction
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisCalibrationVelocityBackward,Value:=homingVelocity);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Manual Velocity (Fast)
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisManualVelocityFast,Value:=manualVelocityFast);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Manual Velocity (Slow)
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisManualVelocitySlow,Value:=manualVelocitySlow);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Jog Increment +ve Direction
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisJogIncrementForward,Value:=jogIncrement);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

//Axis Jog Increment -ve Direction
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisJogIncrementBackward,Value:=jogIncrement);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteControllerParameters" Id="{1ba865fd-b48a-4760-a428-0454771760b0}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_WriteControllerParameters : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
	kvParam : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Controller Kv Parameter
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisPositionControlKv,Value:=kvParam);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteDriveParameters" Id="{c2adb773-31f4-400d-bf96-2e61300b72a8}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_WriteDriveParameters : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
	invertPolarity : BOOL;
	refVelocity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Inverse motor polarity
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisMotorDirectionInverse,Value:=invertPolarity);
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteBoolParameter.Busy) DO
	Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);

// Drive Reference Velocity
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisRefVeloOnRefOutput,Value:=refVelocity);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteEncoderParameters" Id="{75354755-7da6-4b6c-bdbd-b438e676dd36}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD M_WriteEncoderParameters : BOOL
VAR_INPUT
	axisID : UINT;
	loopID : UINT;
	invertEncoderDirection : BOOL;
	scalingFactorNumerator : LREAL;
	scalingFactorDenominator : LREAL;
	encoderOffset : LREAL;
	encoderMask : DINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Encoder direction inverse
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderDirectionInverse,Value:=invertEncoderDirection);
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteBoolParameter.Busy) DO
	Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE
Main.WriteBoolParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);

// Encoder scaling factor numerator
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderScalingNumerator,Value:=scalingFactorNumerator);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

// Encoder scaling factor denominator
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderScalingDenominator,Value:=scalingFactorDenominator);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

// Encoder offset
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,Value:=encoderOffset);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

// Encoder Mask
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],ParameterNumber:=MC_AxisParameter.AxisEncoderMask,Value:=encoderMask);
Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=TRUE);
WHILE (Main.WriteParameter.Busy) DO
	Main.WriteParameter(Axis:=Main.Axis[axisID][loopID],Execute:=FALSE);
END_WHILE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Functions">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_EnableAxis">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="1" />
    </LineIds>
    <LineIds Name="FB_Functions.M_MoveAbsolute">
      <LineId Id="11" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_MoveRelative">
      <LineId Id="13" Count="7" />
      <LineId Id="25" Count="1" />
      <LineId Id="29" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_ReadActiveLoop">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_ReadAxisParameters">
      <LineId Id="17" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="147" Count="2" />
      <LineId Id="104" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="120" Count="1" />
      <LineId Id="150" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="124" Count="1" />
      <LineId Id="152" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="128" Count="1" />
      <LineId Id="154" Count="1" />
      <LineId Id="127" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="132" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="136" Count="1" />
      <LineId Id="158" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="78" Count="2" />
      <LineId Id="140" Count="1" />
      <LineId Id="160" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="144" Count="1" />
      <LineId Id="162" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_ReadControllerParameters">
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_ReadDriveParameters">
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_ReadEncoderParameters">
      <LineId Id="16" Count="5" />
      <LineId Id="149" Count="2" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="27" Count="8" />
      <LineId Id="37" Count="8" />
      <LineId Id="47" Count="8" />
      <LineId Id="57" Count="5" />
      <LineId Id="75" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_SetActiveEncoder">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_WriteAxisParameters">
      <LineId Id="33" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="24" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="31" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="43" Count="5" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="49" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="56" Count="0" />
      <LineId Id="64" Count="5" />
      <LineId Id="63" Count="0" />
      <LineId Id="71" Count="5" />
      <LineId Id="70" Count="0" />
      <LineId Id="78" Count="5" />
      <LineId Id="77" Count="0" />
      <LineId Id="85" Count="5" />
      <LineId Id="84" Count="0" />
      <LineId Id="92" Count="5" />
      <LineId Id="91" Count="0" />
      <LineId Id="99" Count="5" />
      <LineId Id="98" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_WriteControllerParameters">
      <LineId Id="9" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_WriteDriveParameters">
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="3" />
      <LineId Id="25" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="10" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Functions.M_WriteEncoderParameters">
      <LineId Id="20" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="25" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="4" />
      <LineId Id="32" Count="0" />
      <LineId Id="40" Count="5" />
      <LineId Id="39" Count="0" />
      <LineId Id="47" Count="5" />
      <LineId Id="46" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>